// misc helper functions

export function draw(a, w, h, iw, ih, s, lw, attribs=[],canvas) {
// boxes, width, height, texture width, texture height, size, line width, box type, canvas

    // draw texture...

    function cut(ar, lw) {
        let res = [];
        for (let i of ar) {

            let [x,
                y,
                w,
                h] = i;
            x -= lw/2;
            y -= lw/2;
            w += lw;
            h += lw;

            res.push(...[[x, y], [x+w, y], [x, y+h],

                [x+w, y], [x, y+h], [x+w, y+h]]);

        }
        return res;
    }

    function mapCoords(a, w, h, s, lw) {

        w += lw;
        h += lw;

        let offset = [-((w/s)/2),
            -((h/s)/2)];

        let bounds = [];

        for (let i of a) {
            let [x,
                y,
                tw,
                th] = i;
            x -= (w/2)+(lw/2);
            y -= (h/2)+(lw/2);
            tw += lw;
            th += lw;
            
            if (i[4] === 0) continue;
            
            bounds.push([x/s, y/s, tw/s, th/s]);
        }

        a = cut(a, lw);

        let outCoords = [];
        let m = Math.max(w, h);

        function aofb(a, b) {
            return a/100*b;
        }

        function aisofb(a, b) {
            return a*100/b;
        }

        for (let i = 0; i < a.length; i++) {
            let [x,
                y] = a[i];
            y = h-y;
            let xp = aisofb(x, w),
            hp = 100-aisofb(y, h);

            outCoords[i] = [(x/s)+offset[0],
                (y/s)+offset[1],
                1.0,
                aofb(aisofb(x, iw), 1),
                aofb(aisofb(a[i][1], ih), 1),...attribs];
        }

        return {
            vertices: outCoords.flat(1),
            verticeCount: outCoords.length,
            width: w/s,
            height: h/s,
            bounds: bounds
        };
    }

    let texmap = mapCoords(a, w, h, s, lw);

    if (canvas) {
        canvas.toBlob((b) => {
            let src = URL.createObjectURL(b);
            d.href = src;
            console.log(d.href);
        });
    }

    return texmap;
}

export function distance(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2-x1, 2)+Math.pow(y2-y1, 2));
}

export function aofb(a, b) {
    return a/100*b;
}

export function aisofb(a, b) {
    return a*100/b;
}

export function genObjectId(length = 10) {
    let cy = "abcdefghijklmnopqqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    let res = [];

    for (let i = 0; i < length; i++) {
        res.push(cy.at(Math.floor(Math.random()*(62-0))+0));
    }
    return res.join("");
}

export function random(max) {
    return Math.floor(Math.random()*(max-0))+0;
}